import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from openai import AsyncOpenAI
from dotenv import load_dotenv

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("OPENAI_ASSIST_TOKEN")

if not all([BOT_TOKEN, OPENAI_API_KEY, ASSISTANT_ID]):
    print("‚ö†Ô∏è  Missing required environment variables! Check your .env file.")
    exit()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
client = AsyncOpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ç—Ä–µ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# {user_id: thread_id}
USER_THREADS = {}


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–¥–∞–º–∏ ---

async def get_or_create_thread(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ç—Ä–µ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    if user_id not in USER_THREADS:
        try:
            thread = await client.beta.threads.create()
            USER_THREADS[user_id] = thread.id
            print(f"‚ú® Created new thread {thread.id} for user {user_id}")
            return thread.id
        except Exception as e:
            print(f"‚ùå Error creating thread for user {user_id}: {e}")
            return None
    return USER_THREADS[user_id]


async def reset_thread_for_user(user_id: int):
    """
    –£–¥–∞–ª—è–µ—Ç —Ç—Ä–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ, —Ç–∞–∫ –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö OpenAI.
    """
    if user_id in USER_THREADS:
        thread_id_to_delete = USER_THREADS[user_id]
        del USER_THREADS[user_id]
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–¥–∞
            await client.beta.threads.delete(thread_id=thread_id_to_delete)
            print(f"üóëÔ∏è Thread {thread_id_to_delete} for user {user_id} has been deleted on OpenAI.")
            return True
        except Exception as e:
            # –û—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ —Ç—Ä–µ–¥ —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
            print(f"‚ö†Ô∏è Could not delete thread {thread_id_to_delete} on OpenAI: {e}")
            return False
    return False


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@dp.message(CommandStart())
async def handle_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å. \n–î–ª—è —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reset")


@dp.message(Command("reset"))
async def handle_reset(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset."""
    user_id = message.from_user.id
    if await reset_thread_for_user(user_id):
        await message.answer("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞!")
    else:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å!")


@dp.message(F.text)
async def process_message(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥
    thread_id = await get_or_create_thread(user_id)
    if not thread_id:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –¥–∏–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥
    try:
        await client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message.text
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        run = await client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=ASSISTANT_ID
        )

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        while run.status in ["queued", "in_progress"]:
            await asyncio.sleep(1)  # –î–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —á—É—Ç—å –±–æ–ª—å—à–µ
            run = await client.beta.threads.runs.retrieve(
                thread_id=thread_id,
                run_id=run.id
            )

        if run.status == "failed":
            print(f"‚ùå Execution error: {run.last_error.message if run.last_error else 'Unknown error'}")
            await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /reset")
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        messages = await client.beta.threads.messages.list(
            thread_id=thread_id,
            order="desc",
            limit=1  # –ù–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        )

        if messages.data and messages.data[0].content:
            response = messages.data[0].content[0].text.value
            await message.answer(response, parse_mode=None)
        else:
            await message.answer("ü§î –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞.")

    except Exception as e:
        print(f"‚ùå Request error for user {user_id}: {e}")
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /reset")

async def initialize_assistant():
    try:
        global USER_THREADS
        USER_THREADS = {}
        assistant = await client.beta.assistants.retrieve(ASSISTANT_ID)
        print(f"üß† Assistant ready: {assistant.name} (Model: {assistant.model})")

        if any(tool.type == "file_search" for tool in assistant.tools):
            print("üìÅ Assistant supports file search")
        else:
            print("‚ö†Ô∏è Assistant does not support file search")

        return assistant
    except Exception as e:
        print(f"‚ùå Initialization error: {e}")
        return None


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        assistant = await client.beta.assistants.retrieve(ASSISTANT_ID)
        print(f"üß† Assistant loaded: {assistant.name} (Model: {assistant.model})")
    except Exception as e:
        print(f"‚ùå Initialization error: Could not retrieve assistant. {e}")
        return

    print("üöÄ Bot is starting...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
